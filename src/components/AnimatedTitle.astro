<script>
  // -- constants
  const morphTime = 2.64;
  const cooldownTime = 1.62;
  const delayBetweenTitles = 368;

  // -- text pairs and their corresponding DOM elements
  const textPairs = [
    ["NATHAN", "__GAGE"],
    // ["BLOG__", "POSTS"]
  ];
  const eltPairs = [
    {
      parent: document.getElementById("titleparent"),
      text1: document.getElementById("title1"),
      text2: document.getElementById("title2"),
    },
    // {
    //   text1: document.getElementById("blog1"),
    //   text2: document.getElementById("blog2")
    // }
  ];

  // -- state
  const textIndices = new Array(textPairs.length).fill(textPairs[0].length - 1);
  const cooldowns = new Array(textPairs.length).fill(cooldownTime);
  const morphs = new Array(textPairs.length).fill(0);

  // -- initialize
  eltPairs.forEach((pair, i) => {
    pair.text1!.textContent =
      textPairs[i][textIndices[i] % textPairs[i].length];
    pair.text2!.textContent =
      textPairs[i][(textIndices[i] + 1) % textPairs[i].length];
  });

  // -- animation functions
  function calculateBlurEffect(fraction) {
    return `blur(${Math.min(8 / fraction - 8, 100)}px)`;
  }

  function calculateOpacityEffect(fraction) {
    return `${Math.pow(fraction, 0.4) * 100}%`;
  }

  function setMorph(index, fraction) {
    const pair = eltPairs[index];
    const reversedFraction = 1 - fraction;

    pair.text2!.style.filter = calculateBlurEffect(fraction);
    pair.text2!.style.opacity = calculateOpacityEffect(fraction);

    pair.text1!.style.filter = calculateBlurEffect(reversedFraction);
    pair.text1!.style.opacity = calculateOpacityEffect(reversedFraction);

    pair.text1!.textContent =
      textPairs[index][textIndices[index] % textPairs[index].length];
    pair.text2!.textContent =
      textPairs[index][(textIndices[index] + 1) % textPairs[index].length];

    const isText1Visible = pair.text1!.style.opacity === "1";
    const isText2Visible = pair.text2!.style.opacity === "1";

    if (isText1Visible || isText2Visible) {
      pair.parent!.style.filter = "none";
    } else {
      pair.parent!.style.filter = `url(#threshold)`;
    }
  }

  function doMorph(index) {
    morphs[index] -= cooldowns[index];
    cooldowns[index] = 0;

    const fraction = Math.min(morphs[index] / morphTime, 1);

    if (fraction === 1) {
      cooldowns[index] = cooldownTime;
    }

    setMorph(index, fraction);
  }

  function doCooldown(index) {
    morphs[index] = 0;

    const pair = eltPairs[index];
    pair.text2!.style.filter = "";
    pair.text2!.style.opacity = "100%";

    pair.text1!.style.filter = "";
    pair.text1!.style.opacity = "0%";
  }

  function initAnimationForPair(index) {
    let lastFrameTime = new Date();

    function animatePair() {
      requestAnimationFrame(animatePair);

      const currentTime = new Date();
      const dt = (currentTime - lastFrameTime) / 1000;
      cooldowns[index] -= dt;

      if (cooldowns[index] <= 0) {
        if (morphs[index] === 0) {
          textIndices[index]++;
        }
        doMorph(index);
      } else {
        doCooldown(index);
      }

      lastFrameTime = currentTime;
    }

    animatePair();
  }

  // -- start animation
  eltPairs.forEach((_, i) => {
    setTimeout(() => initAnimationForPair(i), i * delayBetweenTitles);
  });
</script>

<div
  id="titleparent"
  class="relative pb-6 select-none pointer-events-none anim-container"
>
  <span id="title1" class="absolute text-md -translate-x-1/2"></span>
  <span id="title2" class="absolute text-md -translate-x-1/2"></span>
</div>

<svg class="pointer-events-none select-none absolute">
  <defs>
    <filter id="threshold">
      <feColorMatrix
        in="SourceGraphic"
        type="matrix"
        values="1 0 0 0 0
									0 1 0 0 0
									0 0 1 0 0
									0 0 0 255 -140"></feColorMatrix>
    </filter>
  </defs>
</svg>
